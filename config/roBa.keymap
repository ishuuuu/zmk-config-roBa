#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        kill_to_bol: kill_to_bol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "KILL_TO_BOL";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer_win {
            bindings = <
&kp Q           &kp W         &kp E         &kp R          &kp T                                &kp Y      &kp U  &kp S      &kp O    &kp P
&kp A           &kp S         &kp D         &kp F          &kp G  &kp LS(LG(S))      &kp MINUS  &kp H      &kp J  &kp K      &kp L    &kp SEMICOLON
&kp Z           &kp X         &kp C         &kp V          &kp B  &kp COLON          &kp A      &kp N      &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_SHIFT  &kp LEFT_WIN  &kp LEFT_ALT  &mt LCTRL F13  &mo 3  &mo 4              &kp SPACE  &lt 2 F14                             &kp RIGHT_SHIFT
            >;
        };

        default_layer_mac {
            bindings = <
&kp Q           &kp W         &kp E         &kp R          &kp T                                &kp Y      &kp U  &kp S      &kp O    &kp P
&kp A           &kp S         &kp D         &kp F          &kp G  &kp LS(LG(S))      &kp MINUS  &kp H      &kp J  &kp K      &kp L    &kp SEMICOLON
&kp Z           &kp X         &kp C         &kp V          &kp B  &kp COLON          &kp A      &kp N      &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_SHIFT  &kp LEFT_WIN  &kp LEFT_ALT  &mt LCTRL F13  &mo 3  &mo 4              &kp SPACE  &lt 2 F14                             &kp RIGHT_SHIFT
            >;
        };

        NUM {
            bindings = <
&kp PIPE           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp MINUS                                               &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH
&kp DOUBLE_QUOTES  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PLUS   &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp DOLLAR       &kp PERCENT   &kp CARET             &kp LEFT_BRACKET       &kp RIGHT_BRACKET
&kp SQT            &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp EQUAL  &kp EQUAL                    &trans          &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &kp LEFT_BRACE         &kp RIGHT_BRACE
&kp UNDERSCORE     &kp KP_N0        &kp PERIOD       &trans           &trans     &trans                       &trans          &trans                                                                      &kp TILDE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(X)     &kp END       &trans           &kp TAB                                &kp LC(V)       &trans   &trans  &trans   &kp UP_ARROW
&kp HOME        &kp F9        &kp DELETE    &kp RIGHT_ARROW  &kp F10         &trans      &trans     &kp BACKSPACE   &kp F11  &trans  &kp F12  &trans
&kp F1          &kp F2        &kp F3        &kp F4           &kp LEFT_ARROW  &trans      &trans     &kp DOWN_ARROW  &kp F5   &kp F6  &kp F7   &kp F8
&kp LEFT_SHIFT  &kp LEFT_WIN  &kp LEFT_ALT  &kp LCTRL        &trans          &trans      &kp ENTER  &trans                                    &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &mkp MB4        &msc SCRL_UP    &mkp MB5         &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1        &msc SCRL_DOWN  &mkp MB2         &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &msc SCRL_LEFT  &mkp MB3        &msc SCRL_RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                   &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
